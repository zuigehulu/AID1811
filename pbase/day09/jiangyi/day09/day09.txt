day08回顾
  两个容器类
    set 集合(可变)
      set() / set(iterable)
      {1, 2, 3}
      集合推导式 {x for x in range(10)}
    frozenset 集合(不可变)
      frozenset() / frozenset(iterable)

  集合和固定集合运算:
    & 交集, | 并集, -补集, ^对称补集,  < 子集, > 超集
    &=     |=      -=     ^=
    <=   >=  == != 
    in / not in

  函数:
    len(x).....
  集合的方法:
    S.add(x)      添加
    S.remove(x)   删除
    S.discard(x)  删除(不报错误)
    S.pop(x)      移除(取出)
    S.clear()     清空
    S.copy()      浅拷贝
    S.update(s2)
    ...
  所有的容器类都是可迭代对象
    list, str, tuple, dict, set, frozenset
    bytes, bytearray(后面才学)


函数 function
  def 语句
    作用:
      封装语句块,把一些语句看成功能整体
    语法:
      def 函数名(形参列表):
          语句块

  return 语句
    作用:
      结束当前函数的执行,返回到调用此函数的地方,同时返回一个
      对象的引用关系(默认返回None)
    语句
      return [表达式]
  函数调用:
    函数名(实际调用传参)





day09 笔记:
python 函数参数的传递
    把数据给函数
传递方式:
  1. 位置传参
       序列传参
  2. 关键字传参
       字典关键字传参

位置传参
  实际参数(实参)与形式参数(形参)的对应关系,是按位置来依次对应
  的
  示意:
    def mymin(a, b, c):
        pass

    mymin(1, 2, 3)

  说明:
    实参和形参按位置进行匹配
    实参的个数必须与形参个数相同
  示例见:
    position_give_args.py

序列传参
  序列传参是指在函数调用过程中,用 星号(*) 将列表拆解后按位置
  进行参数传递的方式
  示例见:
    sequence_give_args.py
  说明:
    序列传参时,序列拆解的位置将与形参一一对应

关键字传参
  是指传参时,按着形参的名称给形参赋值
  实参和形参按名称进行匹配

  示例见:
    keyword_give_args.py
  说明:
    实参和形参按名称进行匹配,可以不按位置进行匹配
    实参中的关键字要在形参中存在

字典关键字传参
  是指实参为字典,将字典有两个星号 (**) 拆解后进行关键字传参的
  传递方式

  示例见:
    dict_keywords_give_args.py
  说明:
    1. 字典的键名和形参名必须一致
    2. 字典的键名必须是符合标识符命名规则的字符串
    3. 字典的键要在形参中存在


函数的综合传参
  1. 函数的传参方式,在形参能唯一匹配到相应的实参的情况下
     可以任意组合
  2. 函数的位置传参要先于关键字传参
  示例:
    def myfun1(a, b, c):
        pass
    myfun1(100, *[200, 300])     # 正确
    myfun1(*(100, 200), 300)     # 正确
    myfun1(*[100], *"AB")        # 正确
    myfun1(*[100], 200, *[300])  # 正确
    myfun1(1, c=3, b=2)          # 正确
    myfun1(c=3, **{'b':2, 'a':1}) # 正确
    myfun1(**{'b':2, 'a':1}, c=3) # 正确
    # myfun1(**{'b':2, 'a':1}, 3)  # 出错
    myfun1(a=1, 2, c=3)  # 出错

函数的参数传递的过程
  示例1
    a = 100
    b = 200

    def f1(x, y):
        print(x + y)

    f1(a, b)  # x = a  y = b
    ....
    #  实参给形参进行赋值传递,并不会复制新的对象:
    #  即x和a 同时引用100, y和b同时引用200



可变的数据类型作为函数的参数传递
  示例:
    a = [1, 2, 3]
    b = 200
    def f2(x, y):
        x.append(y)
    
    f2(a, b)
    print(a)  # [1, 2, 3, 200]
    print(b)  # 200
    
    f2(a, 300)  # x = a, y = 300
    print(a)  # [1, 2, 3, 200, 300]

  示例2:
    a = [1, 2, 3]
    b = 200
    def f3(x, y):
        print(id(x))  # aaaa
        x = x + [y]  # 此处改变的是变量,不是对象
        print(id(x))  # bbbb 与上面不同
        print(x)  # [1, 2, 3, 200]

    f3(a, b)  # x = a, y = b
    print(a)  # [1, 2, 3]





--------------- 以下讲函数的形参----------------
函数的缺省参数
  语法:
    def 函数名(形参名1=默认实参1, 形参名2=默认实参2, ...):
        语句块
  示例见:
    default_args.py
  作用:
    让调用更加方便,无需传入无关的实参
  说明:
    缺省参数必须自右至左依次存在,如果一个参数有缺省参数,则其
    右侧的所有参数都必须有缺省参数,如:
       def error_fn(a, b=10, c):... 是错误的 
    缺省参数可以有0个,1个或多个,甚至全部都有缺省参数 
  示例:
    def fn(a=0, b=1, c=2):  # 对的
    def fn(a=0, b, c=3):    # 错的

练习:
  写一个函数 myadd, 此函数可以计算两个数,三个数和四个数的和
  如:
    def myadd(....):
        ...
    
    print(myadd(10, 20))         # 30
    print(myadd(100, 200, 300))  # 600
    print(myadd(1, 2, 3, 4))     # 10




函数形参的定义方式:
  1. 位置形参
  2. 星号元组形参
  3. 命名关键字形参
  4. 双星号字典形参

位置形参:
  语法:
    def 函数名(形参1, 形参2, ...):
        语句块
  
星号元组形参:
  语法:
    def 函数名(*元组形参名):
        语句块
  作用:
    收集多余的位置传参
  说明:
    元组形参名一般命名为 'args'
  示例见:
    star_tuple_args.py


练习:
  写一个函数,mysum,可以传入任意个数字实参,返回所有实参的和
    如:
      def mysum(...):
          ...
      
      print(mysum(1, 2))  # 3
      print(mysum(1, 2, 3, 4))  # 10
      print(mysum(1, 2, 3, 4, 5, 6, 7, 8)) # 36



命名关键字形参
  语法:
    def 函数名(*,命名关键字形参1, 命名关键字形参2, ...):
        语句块
    或
    def 函数名(*args,命名关键字形参1, 命名关键字形参2, ...):
        语句块
  作用:
    强制所有的参数都必须用关键字传参或字典关键字传参传递
  示例见:
    named_keyword_args.py
    named_keyword_args2.py


    
双星号字典形参:
  语法:
    def 函数名(**字典形参名):
        语句块
  作用:
    收集多余的关键字传参
  说明:
    字典形参名一般命名为'kwargs'
    一个函数内字典形参最多只能有一个
  示例:
    dict_keyword_args.py


函数的参数说明:
  位置形参,缺省参数,星号元组形参,双星号字典形参可以混合使用

  函数参数自左至右的顺序为:
    位置形参
    星号元组形参
    命名关键字形参
    双星号字典形参
  示例:
    def fn(a, b, *args, c, **kwargs):
        pass
    
    def fn(100, 200, 300, 400, c=1, d=2, e=3)

练习:
  已知内建函数 max 的帮助文档是:
    >>> help(max)
    max(iterable)
    max(arg1, arg2, *args)
  仿造max写一个mymax函数,功能与max函数完全相同
    (要求:不允许调用 max 函数)

    print(mymax([6, 8, 5, 3]))  # 8
    print(mymax(100, 200))      # 200
    print(mymax(1, 2, 5, 9, 7)) # 9


可以接收任意的位置传参和关键字传参的形参列表
  def fn(*args, **kwargs):
      print(args, kwargs)
    


全局变量和局部变量
  局部变量 local variable
    定义在函数内部的变量称为局部变量(函数的形参也是局部变量)
    局部变量只能在函数内部使用
    局部变量在函数调用时才能被创建,在函数调用后会自动销毁

  全局变量 global variable
    定义在函数外部,模块内部的变量称为全局变量
    全局变量,所有函数都可以直接访问(但函数内部不能将其赋值)
  
  示例:
    global_and_local.py




练习:
  1. 写一个函数 isprime(x) 判断x是否是素数,如果为素数则返回
    True, 否则返回False

  2. 写一个函数 prime_m2n(m, n) 返回从m开始,到n结束范围内
    的素数(不包含n), 返回这些素数的列表,并打印
    如:
      L = prime_m2n(10, 20)
      print(L)  # [11, 13, 17, 19]
  3. 写一个函数primes(n), 返回指定范围内n(不包含n)的全部素
     数的列表,并打印这些素数的列表
      L = primes(10)
      print(L)  # [2, 3, 5, 7]
      1) 打印100 以内的全部素数
      2) 打印 100 ~ 200之间全部素数的和

  4. 改写之前的学生信息管理程序,将程序 改为两个函数:
      def input_student():
          ....    # 此函数用于获取学生的信息,形成包含有字典的列表
          然后返回此列表
      def output_student(L):
          ....   # 此函数以列格的形式打印学生信息的列表

      测试(实现与之前相同的功能):
      infos = input_student()
      print(infos)
      output_student(infos)












