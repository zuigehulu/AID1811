day05回顾
  循环
    for 语句
      遍历可迭代对象
      语法:
        for 变量列表 in 可迭代对象
            语句块1
        else
            语句块2
    可迭代对象:
      字符串 str
      列表 list
      range() 返回回来的对象
      以及后面所学的所有容器类都是可迭代对象
    range函数
      range(终止整数)
      range(开始整数,终止整数)
      range(开始整数,终止整数, 步长)
      作用: 用于创建一个整数序列生成器(可迭代对象)

    contine 语句
      用于重新开始一次新的循环
        while a > b:
            ....
            continue
        for x in "ABC":
            ...
            continue

列表容器
  可以存储任意数据的容器
  可变的序列

列表的创建:
  字面值的创建方式
    []    [1, 2, 3, 4]    [1,2, [3,4,[5,6]]]
  构造函数的创建方式
    list()
    list("ABC")
    list(range(1, 10))
    list([1, 2, 3, 4])
    
  列表的运算:
    +  +=  *  *= 
    列表 += 可迭代对象 (实现追加可迭代对象内的数据)
  列表的比较运算:
    < <= > >= == != 
    依次比较
  in / not in 运算符
    



day06 笔记

列表的索引操作
  index
索引的语法:
  列表[整数表达式]
用法:
  等同于字符串的索引
  索引分为正向索引和反向索引,规则与字符串的规则完全相同
示例:
  L = [1, 2, 3, 4, 5]
  print(L[1])  # 2
  print(L[-1]) # 5

列表的索引赋值操作
  列表是可变的序列,可以通过索引赋值改变列表中的元素

  语法:
    列表[整数表达式] = 表达式
  
  示例:
    L = [1, -2, 3, -4, 5]
    L[1] = 2
    print(L)  # [1, 2, 3, -4, 5]
    L[-2] = 4
    print(L)  # [1, 2, 3, 4, 5]


列表的切片
  列表[:]
  列表[::]
  列表的切片是从列表中取出相应的元素,重新组成一个新的列表
  列表的切片规则等同于字符串的切片规则

  示例:
    L = [0, 1, 2, 3, 4, 5, 6, 7, 8]
    L2 = [1:9:2]  # L2 = [1, 3, 5, 7]

列表的切片赋值
  作用:
    可以改变原列表的排序,可以插入,删除和修改数据
  语法:
    列表[切片slice] = 可迭代对象
  说明:
    赋值运算符的右则必须是可迭代对象
  示例:
    L = [2, 3.1, 4.2, 5]
    L[1:3] = [3, 4]    # L = [2, 3, 4, 5]
    L[1:3] = [3.1415]  # L = [2, 3.1415, 5]
    L[1:] = range(3, 7)  # L = [2, 3, 4, 5, 6]
    L = [2, 4]
    L[1:1] = [3]      # L = [2, 3, 4]  # L[1:] = [3, 4]
    L[0:0] = range(2) # L = [0, 1, 2, 3, 4]
    L[5:5] = [5, 6]   # L = [0,1,2,3,4,5,6]
    L = [2, 4]
    L[0:0] = "AB"  # L = ['A', 'B', 2, 4]
    L = [2, 4]
    L[0:0] = ["AB"]    # L = ['AB', 2, 4]
    L[::] = []  # 清空, 不等同于 L = []

注意事项:
  # 第一种做法
  L = [1, 2, 3, 4]
  L2 = L
  L = []
  print(L2)  # [1, 2, 3, 4]

  # 第二种做法
  L = [1, 2, 3, 4]
  L2 = L
  L[:] = []  # 此处与上面不同?
  print(L2)  # []
  # 问: 以上两种做法有什么区别?


练习:
  已知有列表:
    L = [3, 5]
    用索引和切片操作,将原列表改为:
    L = [1, 2, 3, 4, 5, 6]
    将列表反转,删除最后一个元素后再打印此列表
    ...
    print(L)  # [6, 5, 4, 3, 2]
  (尽可能让L绑定的对象的ID不变)

del 语句
  用于删除列表中的元素
  语法:
    del 列表[索引]
    del 列表[切片]
  示例:
    L = [1, 3.14, 2, 100, 3]
    del L[1]
    del L[2]
    print(L)
  说明:
    列表中的元素被删除,后续元素的索引值会变小,即后续元素前移
  


列表的切片操作的注意事项:
  对于步长不等于1的切片赋值,赋值运算符右侧的可迭代对象提供的
  元素个数,一定要等于切片切出的段数
  如:
    L = [1, 2, 3, 4, 5, 6]
    L[::2] = "ABC"    # 对的
    L[::2] = "ABCDE"  # 错的

python3 中常用的序列函数
len(seq)   返回序列的长度
max(x)     返回序列的最大值元素(要求每两个元素都能比较大小)
min(x)     返回序列的最小值元素
sum(x)     返回序列中所有元素的和(元素必须是数值类型)
any(x)     真值测试, 如果列表中其中一个值为真值,则返回True
all(x)     真值测试,如果列表中所有值都为真值才返回True,否则
           返回False

示例:
  L = [1, 3.14, 0, 999999, 10]
  len(L)   # 5
  max(L)   # 999999
  min(L)   # 0
  sum(L)   # 1000013.14
  any(L)   # True
  all(L)   # False

序列的相关的函数2
reversed(seq)  返回原序列的反向顺序的可迭代对象
sorted(iterable, reverse=False)  返回可迭代对象中排序后
                    的对象的列表 

示例:
  L = [5, 9, 7, 1, 3]
  for x in reversed(L):
      print(x)  # 3 1 7 9 5  # 原来顺序的反向
  L2 = sorted(L)  # L2 = [1, 3, 5, 7, 9]
  L3 = sorted(L, reverse=True)  # L3 =[9, 7, 5, 3, 1]

练习:
  输入一些整正整数,存入一个列表L中,当输入-1时结束输入
  1. 打印出列表中存有的数字
  2. 打印出您输入的数字的最大数
  3. 打印出您输入的这些数的平均值

python3 中常用的列表方法(method)
  详见: >>> help(list)
  文档参见:
    python_base_docs_html/list.html
  
练习:
  1. 写一个程序,让用户输入两个以上的正整数,当输入负数时结束输入
    (要求: 限制用户,不允许输入重复的数)
    1) 打印这些数字的和
    2) 打印这些数中最大的一个数
    3) 打印这些数中第二大的一个数 
    4) 删除最小的一个数

  2. 做上题后思考:
    如何保证原数据的顺序不变，最后按原来的顺序打印出剩余的数？



深拷贝 和 浅拷贝
1. 不拷贝
    L1 = [1, 2, [3.1, 3.2]]
    L2 = L1  # 不拷贝:两个变量同时绑定在一个对象上
    L2[1] = 2.2
    L2[2][0] = 3.14
    print(L2)  # [1, 2.2, [3.14, 3.2]]
    print(L1)  # [1, 2.2, [3.14, 3.2]]

2. 浅拷贝 shallow copy
  浅拷贝是指在复制过程中,只复制一层变量,不会复制深层变量绑定
    的对象的复制过程
  示例:
    L1 = [1, 2, [3.1, 3.2]]
    L2 = L1.copy()  # 浅拷贝
    L2[1] = 2.2
    L2[2][0] = 3.14
    print(L2)  # [1, 2.2, [3.14, 3.2]]
    print(L1)  # [1, 2, [3.14, 3.2]]

3. 深拷贝 deep copy
  深拷贝是指在复制过程中,复制所有变是及变量关联的深层变量绑定的
  对象,实现两个对象完全独立
  示例:
    import copy  # 导入复制模块(语句后面会讲)
    L1 = [1, 2, [3.1, 3.2]]
    L2 = copy.deepcopy(L1)  # 深拷贝
    L2[1] = 2.2
    L2[2][0] = 3.14
    print(L2)  # [1, 2.2, [3.14, 3.2]]
    print(L1)  # [1, 2, [3.1, 3.2]]

思考:
  L1 = [1, 2, "hello"]
  L2 = L1.copy()
  import copy
  L3 = copy.deepcopy(L1)
  
  L2[2] += "!"
  L3[2] += "?"
  会影响到L1码？为什么？


列表和字符串比较
  列表和字符串都是序列，元素之间先后顺序关系
  字符串是不可以改变的序列，列表是可以改变的序列
  字符串只能存储字符，而列表可以存储任意类型的对象
  列表和字符串都是可迭代对象

不可变数据类型:
  占用内存相对较少，数据安全，但不能实现添加，删除等操作
可变数据类型
  占用内存较多，可以实现灵活的添加，删除，修改等操作

字符串文本解析方法split, splitlines 和join
S.split(sep=None) 将字符串使用sep作用分隔符分割S字符串，返回
          分割之后的字符串列表，当不给定参数时，用空白字符作为
          分隔符
S.splitlines(sep=None)  将字符串以行为单位进行分割，形成分
          割后的列表,默认以换行符作为分隔符
S.join(iterable)  用可迭代对象中的字符串，返回一个中间用S
          进行分隔的字符串

示例:
  s = 'Beijing is capital'
  L = s.split(' ')  # L = ['Beijing', 'is', 'capital']
  s = 'a b c d\nABCD\n1 2 3 4\n'
  L = s.splitlines()  # L = ['a b c d', 'ABCD', '1 2 3 4']
  L2 = ['C:', 'Programe files', 'python3']
  path='\\'.join(L2)     # 'C:\Programe files\python3'

练习:
  有字符串"hello", 生成字符串"h e l l o" 和 'h-e-l-l-o'
  答案:
    方法１:
      L = list("hello")  # L = ['h', 'l', ...]
      s1 = ' '.join(L)   # s1 = "h e l l o"
      s2 = '-'.join(L)   # s2 = 'h-e-l-l-o'
    方法2:
      s1 = ' '.join("hello")   # s1 = "h e l l o"
      s2 = '-'.join("hello")   # s2 = 'h-e-l-l-o'

列表推导式 list comprehension
  列表推导式是用可迭代对象来创建列表的表达式

  作用:
    用简易方法创建列表
  语法:
    [表达式 for 变量 in 可迭代对象]
    或
    [表达式 for 变量 in 可迭代对象 if 真值表达式]
  示例:
    生成一个数字1 ~ 9的整数的平方的列表，即:
       L = [1, 4, 9, 16, 25, .... 81]
    示例见:
      list_comprehesion.py

练习:
  用列表推导式生成 1 ~ 100 内所有奇数的列表
  [1, 3, 5, 7, .... 99]
  答案:
    L = [x for x in range(1, 100, 2)]

列表推导式示例2
    生成一个数字1 ~ 9的 奇 数的平方的列表:
       L = [1, 9, 25, 49, 81]

列表推导式的嵌套:
  [表达式1
      for 变量1 in 可迭代对象1 if 真值表达式1
          for 变量2 in 可迭代对象2 if 真值表达式2 
              ... ]
示例:
  L = [x + y for x in [10, 20, 30] for y in [1,2,3]]
  print(L)  # [11, 12, 13, 21, 22, 23, 31, 32, 33]

练习:
  用字符串"ABC"和字符串"123" 生成如下列表:
    ['A1','A2','A3','B1','B2','B3','C1','C2','C3']
  答案:
  L = [x + y for x in "ABC" for y in "123"]
  print(L)





练习:
  1. 输入一个开始的整数 用begin绑定
    输入一个结束的整数 用end绑定
    将从begin开始,到end结束(不包含end)的偶数存于列表中,
    并打印此列表
    (建议用列表推导式实现)
  2. 已知有字符串:
     s = '100,200,300,500,800'
     将其转化为列表,列表的内部都为数字:
     L = [100, 200, 300, 500, 800]
  3. 已知有一个列表中存有很多数,还有重复的,如:
     L = [1, 3, 2, 1, 6, 4, 2, ...., 98, 82]
     1) 将列表中出现数字存入一个列表L2中
        要求: 重复出现多次的数字只能在L2中保留一份(去重)
     2) 将L列表中出现两次的数字存于另一个列表L3中,在L3中
        只保留一份
  4. 写程序,生成前40个斐波那契数(Fibonacci)
    1  1  2  3  5  8  13  ....
    要求将这些数的存于一个列表中,最后打印这些数



