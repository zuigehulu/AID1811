day11回顾
  函数式编程
    推荐写小函数,用小函数构建大型程序
  函数的可重入性
    函数里如果没有使用除局部变量以外的变量,则此函数必然为
      可重入函数 
  高阶函数
    1. 有一个函数作用参数传入的函数
    2. 函数返回另一个函数
  三个内建的高阶函数
    map, filter, sorted
    map(func, *iterables)    用多个可迭代对象生成一个
                         可迭代对象
    filter(func, iterable) 过滤
    sorted(iterable, key=None, reverse=False)  排序
                         返回排序后的列表
  递归 recursion
    函数直接或间接的调用自身
    优点:
      把问题简单化
    缺点:
      受递归层数限制
  闭包 closure
    特点:
      封闭外部嵌套函数中的变量,只让当前函数可见
      闭包创建函数(外部嵌套函数)中的变量会延长生命周期
    


  


day12 笔记
装饰器 decorators(专业提高篇)
什么是装饰器
  装饰器是一个函数,主要作用是用来包装另一个函数或类(后面才讲)

  作用:
    在不修改被装饰函数的源代码,不改变被装饰函数的调用方式的情
    况下添加或改变原函数的功能

  语法:
    def 装饰器函数名(fn):
        语句块
        return 函数对象
    
    @装饰器函数名<换行＞
    def 被装饰函数名(形参列表):
        语句块 

 示例及示意见:
    mydeco1.py
    mydeco2.py
    mydeco3.py
    mydeco4.py(语法实现)

带参数的装饰器的应用实例见:
    mydeco5.py

函数的文档字符串
  函数内第一次未赋值给任何变量的字符串是函数的文档字符串

  语法:
    def 函数名(参数列表):
       '函数的文档字符串'
       语句块
  示例:
    def myfunc(x, y, z):
        '''这是一个测试文档字符串的函数:
        参数:
           x, 随便写点什么
           ... 此处省略三行字
        '''
        pass
  说明:
    文档字符串通常用来说明本函数的功能和使用方法
    在交互模式下可以用:>>> help(函数名) 查看函数的文档字符串
    函数的文档字符串绑定在函数的 __doc__ 属性上

函数的__doc__属性
  用于绑定函数的文档字符串
示例:
    def test_fn(x, y, z):
         '''这是字符串的第一行
    这是第二行'''
    >>> help(test_fn)
    >>> test_fn.__doc__
    '这是字符串的第一行\n这是第二行'


函数定义的完整语法总结:
  def 语句语法:
    [@装饰器1]
    [@装饰器2]
    [...]
    def 函数名([位置形参], [*元组形参], [命名关键字形参], 
              [**字典形参]):
        '''文档字符串'''
        语句块
   注: []表示其中的内容可省略


面试题:
    L = [1, 2, 3]
    def f(n=0, lst=[]):
        lst.append(n)
        print(lst)

    f(4, L)  # [1, 2, 3, 4]
    f(5, L)  # ???
    f(100)   # ???
    f(200)   # ???
    请问，每个函数打印结果是什么，为什么？



模块 Module
  什么是模块
    模块是一个包含有一系列的数据,函数,类等组成的程序组
    模块是一个文件,模块文件名通常以.py结果

  作用:
    1. 让一些相关的数据,函数,类等有逻辑的组织在一起,使逻辑结构
       更加清晰
    2. 模块中的数据,函数和类可提供给其它模块或程序使用

  模块的分类:
    1. 内置模块,在解析器的内部可以直接使用
    2. 标准库模块,安装python时已安装且可以直接使用
    3. 第三方模块(通常为开源), 需要自己安装
       通常 用pip3 命令来安装,如:
         $ pip3 install tensorflow
    4. 用户自己编写的模块(可以作为其它人的第三方模块)


模块的导入 import
import 语句
  语法:
    import 模块名1 [as 模块新名1][, 模块名2[as 模块新名2]]
  作用:
    将某模块整体导入到当前模块作用域内
  示例:
    import math
    print(math.factorial(5))
    import time, sys
  用法:
    模块名.属性名

查看模块属性的函数:
  dir(obj) 函数, 返回模块内所有属性的列表
  help(obj) 函数,可以查看模块相关的文档字符串


练习:
  1. 写一个程序,输入圆的半径, 打印出这个圆的面积
  2. 输入一个圆的面积,打印出这个圆的半径
    (要求: 用math模块里的函数实现)
      详见:>>> help(math)


from import 语句
  语法:
    from 模块名 import 属性名1[as 属性新名1]
            [, 属性名2 [as 属性新名2], ...]
  作用:
    将某模块内的一个或多个属性导入到当前模块的作用域
  示例:
    from math import factorial as fac
    from math import sin, cos, e
    from math import sqrt, pi
    print(sin(pi/2))
    print(fac(5))  # 120


from import *语句
  语法:
    from 模块名 import *
  作用:
    将某模块的所有属性导入到当前模块
  示例:
    from math import *
    print(sin(pi))
    print(factorial(10))

dir 函数
  语法:
    dir([对象]) 返回一个字符串列表
  说明:
    如果没有参数调用,则返回当前作用域内的所有变量的列表
    如果给定一个对象作为参数,则返回这个对象所有变量的列表
      对于一个模块,返回这个模块的全部变量
      对于一个类,返回类对象的所有变量,并递归基类对象的所有变量
      对于其它对象,返回所有变量,类变量和基类变量
 

数学模块
  模块名 math
  文档参见:
     python_base_docs_html/数学模块math.html


时间模块
  模块名 time
  文档参见:
    python_base_docs_html/时间模块time.html

练习:
  写一个程序，输入你的生日（年,月,日）
    1) 算出你已经出生了多少天
    2) 算出您出生那天是星期几?



练习:
  1. 写一个程序,以电子时钟的格式打印时间:
    格式为:
      HH:MM:SS
    如:
      17:51:20
    时间自动变化

  2. 编写一个闹钟程序,启动时设置定时时间,到时间后打印一句
    '时间到!!!' 然后退出程序

  3. 编写函数fun 基功能是计算下列多项式的和
    Sn = 1 + 1/1! + 1/2! + 1/3! + .... + 1/n!
    (建议用数学模块中的factorial)
      求当n得20时 Sn的值
    即:
      print(fun(20))  # 2.718281828...


    