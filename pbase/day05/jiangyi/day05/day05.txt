day04 回顾:
  字符串
    字符串的格式化表达式
      "姓名:%s  年龄:%d"  % ('tarena', 15)
      得到
      "姓名:tarena  年龄:15"
    占位符和类型码:
      %s
      %d
      %x
      %f
      %g
    位位符和类型码之间的格式化语法
      % - + 0 宽度.精度 类型码
      '%-+7.2f' % 3.1415926

  循环语句
    while 语句
    for 语句

while 语句
    while 真值表达式:
        语句块1
    else:
        语句块2

while嵌套
    while 真值表达式:
        语句块1
        while 真值表达式:
            语句块1
        else:
            语句块2
    else:
        while 真值表达式:
            语句块1
        else:
            语句块2



break 语句
  终止循环(结束循环语句while或for的执行)

  注意:
    break 只能终止包含它的那个循环语句(for,while)

死循环
  通常用于循环次数不确定的循环


day05 笔记:
for 语句
  作用:
    用来遍历可迭代对象的数据元素
    
可迭代对象是指能依次获取数据元组的对象
  可迭代对象包括:
    字符串 str
    (以下后面会讲)
    列表 list
    元组tuple
    字典 dict
    集合 set
    ...
语法:
  for 变量列表 in 可迭代对象:
      语句块1
  else:
      语句块2
说明:
  1. 可迭代对象每次提供一个元素依次赋值给变量列表中的变量,赋值完毕
     后执行语句块1,重复执行此步骤,直到可迭代对象不能提供数据为止
  2. 可迭代对象迭代完所有的元素后,执行else子句部分的语句块2,然后
     退出循环
  3. else 子句部分可以省略不写(同while类似)
  4. 当在循环内部用break终止循环时,else子句部分的语句不会执行

示例见:
  for.py


练习:
  1. 任意输入一段字符串,写程序做如下两件事:
    1) 计算出空格的个数,并打印个数
        (要求用for语句,不允许使用S.count方法)
    2) 计算出字符串中全部英文字符的个数
       (注:英文字符的编码值为0~127,可用ord(x) 函数进行判断)

  2. 完成上题后思考,上述功能能否用while语句实现

练习:
  输入一个字符串,从尾向头输出这个字符串的字符
    如:
      请输入: hello
    打印如下:
      o
      l
      l
      e
      h

  可以用 while语句 或 for语句 实现  

range 函数
  函数    说明:
  range(stop)  用来生成 0 ~ stop 区间内的整数,直到stop为
             止,不包含stop
  range(start, stop[, step]) 用来生成start~stop区间内的
            整数,直到stop为止(不包含stop), 每个整数间隔
            step(step可以为负数,但不可以为0)
  作用:
    用来创建一个生成一系列整数的可迭代对象(也叫整数序列生成器)
  说明:
    此函数调用返回回来的对象可以用于for语句取值
  示例:
    range(4)         # 生成 0, 1, 2, 3
    range(3, 6)      # 生成 3, 4, 5
    range(1, 10, 2)  # 生成 1, 3, 5, 7, 9
    range(5, 0, -2)  # 生成 5, 3, 1
    range(4, 0)      # 空
  示例见:
    range.py

练习:
  1. 用for语句打印 1 ~ 20的整数,打印在一行内

  2. 求 100 以内有哪儿些整数 与 自身 +1 的乘积再对11求余结果
    等于8?  (包含100)
      即:
        x * (x + 1) % 11 == 8
    
  3. 求:
    1 + 3 + 5 + 7 + .... + 99 的和


for 语句的注意事项
  1. for 中 range的调用次序:
    # 请问此程序的打印结果是什么?为什么?
    i = 6
    for x in range(1, i):
        print('x=', x, 'i=', i)
        i -= 1
    结果: 循环5次,循环次数与i的变化没有关系 

  2. for语句内的变量可能不会被创建
    for x in range(4, 0):
        print(x)
    else:
        print("循环结束后, x=", x)   # 出错,此变量不存在
  

for 语句嵌套:
  与 while 一样,for语句是语句(复合语句),它可以嵌套到其它
  复合语句中
  示例:
    for x in "ABC":
        for y in "123":
            print(x + y)



练习:
  1. 输入一个整数,代表正方形的宽度,打印如下的正方型
  (注: 用for语句嵌套实现)
    如:
      请输入: 5
    打印:
      1 2 3 4 5
      1 2 3 4 5
      1 2 3 4 5
      1 2 3 4 5
      1 2 3 4 5
    如:
      请输入: 3
    打印:
      1 2 3
      1 2 3
      1 2 3

  2. 输入一个整数,代表正方形的宽度,打印如下的正方型
  (注: 用for语句嵌套实现)
    如:
      请输入: 5
    打印:
      1 2 3 4 5
      2 3 4 5 6
      3 4 5 6 7
      4 5 6 7 8
      5 6 7 8 9
    如:
      请输入: 3
    打印:
      1 2 3
      2 3 4
      3 4 5


continue 语句
  问题:
    如何让程序不再向下执行,重新开始一次新的循环
  作用:
    用于循环语句(while,for语句)中,不再执行本次循环内
    continue之后的语句,重新开始一次新的循环
  说明:
    1. 在for语句中执行continue语句,将会从可迭代对象中取下一个
       元素,绑定变量后再次进行循环
    2. 在while语句中执行continue语句,将会直接跳转到真值表
       达式处,重新判断循环条件
  语法:
    continue
  示例见:
    continue.py
    continue2.py


练习:
  1. 求1 ~ 100 之间所有不能被2, 3, 5, 7中 任意一个数整
    除的数的和(用continue来实现)


循环小结:
  while 语句
  for 语句
      字符串 str
      range() 调用后的返回值
  break 语句(终止循环)
  continue 语句(开始一次新的循环)


列表 list 
  问题:
    如何将计算机运行的数据临时存入一个地方,同时又方便添加,
      删除,修改等操作?
    家里的衣柜是干什么的?  容器

什么是列表:
  列表是一种容器
  列表是可以被改变的序列
  列表是由一系列特定元素组成,元素与元素之间没有任何的关联关系
    他们之间有先后顺序关系

python序列类型简介
  字符串 str
  列表 list
  元组 tuple
  字节串 bytes
  字节数组 bytearray



创建空列表的字面值
      []  创建空列表
   如:
      L = []  # L绑定一个空列表

创建非空列表的字面值
  L = [1, 2, 3, 4]
  L = ['Beijing', 'Shanghai', 'shenzhen']
  L = [1, "二", 3.14, 'four']
  L = [1, 2, [3.1, 3.2], 4]

列表的构造函数 list
  list()   生成一个空的列表,等同于 []
  list(iterable)  用可迭代对象创建一个列表

  示例:
    L = list()  # L 绑定空列表
    L = list("hello")  # L 绑定 ['h', 'e', 'l', 'l', 'o']
    L = list(range(1, 10, 2))  # L=[1,3,5,7,9]

列表的运算:
  算术运算:
    +   +=   *   *=

+ 用于拼接列表
  x = [1, 2, 3]
  y = [4, 5, 6]
  z = x + y  # z = [1, 2, 3, 4, 5, 6]
  z2 = y + x  # z2 = [4, 5, 6, 1, 2, 3]

+= 用于将右侧可迭代对象的数据追加在原列表数据之后
  语法:
    x += 可迭代对象
  如:
    x = [1, 2, 3]
    x += [4, 5, 6]
    x += "ABC"
    x += range(10, 13)
  注:
    列表是可变容器, += 会改变原列表


* 生成重复的列表
  x = [1, 2] * 3  # x = [1, 2, 1, 2, 1, 2]

*= 用于生成重复的列表
  x = [1, 2, 3]
  x *= 2  # x = [1, 2, 3, 1, 2, 3]
  y = 3
  y *= [1, 2]  # y = [1, 2, 1, 2, 1, 2]

列表的比较运算:
  运算符:
    < <= > >= == !=
  说明:
    列表的比较规则与字符串的比较规则相同
    列表要求每两个元素能依次进行比较,否则会出现类型错误
  示例:
    x = [1, 2, 3]
    y = [2, 3, 4]
    x != y  # True
    x < y   # True
    [1, 2, 3] < [1, 3, 2]  # True
    [1, "Two"]  > ['Two', 1]  # TypeError
  

列表是可迭代对象:
  L = [1, 3, 5, 10]
  for x in L:
      print(x)

练习:
  1. 写一个程序, 输入三行文字,将这三行文字保存于一个列表L中,
    并打印这个列表
    如:
      请输入: abc
      请输入: 123
      请输入: 你好
    生成如下列表: L = ['abc', '123', '你好']
    print(L) # ['abc', '123', '你好']

  2. 写一个程序,让用户输入很多个正整数,当输入负数时结束输入
    将用户输入的数字存于列表中
      1) 然后打印这个列表
      2) 计算出这些数字的和,然后打印出这些和
    如:
      请输入: 1
      请输入: 2
      请输入: 3
      请输入: 4
      请输入: -1
    打印:
      [1, 2, 3, 4]
      和是: 10




列表的 in / not in 运算符
  判断一个值是否存在于列表中,如果存在返回True,否则返回False
  同字符串的in运算符,用于检查一个值是否存在于列表中

  示例:
    x = [1, 'two', 3, '四']
    3 in x  # True
    4 in x  # False
    5 not in x  # True
    1 not in x  # False





练习:
  1. 写程序打印九九乘法表
    1x1=1
    1x2=2 2x2=4
    1x3=3 2x3=6 3x3=9
    ....
    1x9=9 ..........  9x9=81

  2. 写一个程序,任意输入一个整数,判断这个数是否为素数prime
    素数(也叫质数),是只能被1和自身整数的正整数
    如:  2 3 5 7 11 13 17 19 ...
    提示:
      用排除法: 当判断x是否为素数时,只要让x分别除以
       2, 3, 4, 5, 6 ... x-1,只要有一次被整除,则x不是
       素数,否则x是素数
  3. 输入一个整数,此整数代表树干的高度,打印一棵如下形状的圣
    诞树
    如:
      输入: 2
    打印:
     *
    ***
     *
     *
    如:
      输入: 3
    打印:
      *
     ***
    *****
      *
      *
      *
  4. 算出 100 ~ 999 范围内的水仙花数(Narcissistic Number)
    水仙花数是指百位的3次方 + 十位的3次方 + 个位的3次方 等于原
    数的整数
    如:
      153 = 1**3 + 5**3 + 3**3
    答案:
      153, 370, ....




















