day16回顾:
  文件 File
    长期存储数据
    以字节为单位进行顺序存储
  文件的操作步骤:
    1. 打开:
       open(文件名, 'rt')
    2. 读写:
      读:
        F.read(n)
        F.readline()
        F.readlines()
      写: 
        F.write(字符串或字节串)
        F.writelines(字符串或字节串列表) 
    3. 关闭:
      F.close()

两种操作方式:
  文本文件操作
    打开模式: 't'
      自动进行编码(write)/解码(read)操作
      默认将'\r\n' 转换为 '\r'
  二进制文件操作
    打开模式: 'b'
      不会自动编解码,会把文件当成字节串来看待

其它方法:
  F.tell()
  F.seek(偏移量,相对位置)
  F.flush()    
  缓冲区的作用是减少对外部输入输出(I/O)的次数

汉字的编码:
  GB国标
    GB18030(二字节或四字节)
      GBK
        GB2312
  UNICODE国际标准
    UNICODE32(四字节)
       UNICODE16(二字节)

    UTF-8 (1~3~6)

编码字符串 :
  gbk2312
  gbk
  gb18030
  utf-8
  ascii

编码注释
# -*- coding:utf-8 -*-






day17笔记
面向对象编程 Object-Oriented Programming

什么是对象
  对象是指现实中的物体或实体 (Object)

面向对象:
  把一切看成对象(实例/实体/物体), 用各种对象之间的关系来描述事务

对象都有什么特征:
  对象有很多属性(名词,量词等)
    姓名, 年龄, 性别 ....

  对象有很多行为(动词,动作)
    学习, 吃饭, 睡觉, 踢球, 工作


什么是类
  拥有相同属性和行为的对象分为一组,即为一个类
  类是用来描述对象的工具,用类可以创建此类的对象(实例)

示意:
  车(类)    -----> BYD E6(京A.88888) 实例,对象
        \
         \ -----> BMW X5(京B.99999) 实例,对象
  
  狗(类)  -------> 小京巴(户籍ID: 0000001)  实例,对象
        \
         \------> 导盲犬(户籍ID: 0000002)

  int(类)  -----> 100 (实例,对象)
        \
         \ -----> 200(实例,对象)



类的创建语句 class 语句
  语法:
    class 类名(继承列表):
        '类的文档字符串'
        实例方法定义
        类变量的定义
        类方法(@classmethod) 定义
        静态方法(@staticmethod)定义
  作用:
    创建一个类
    类用于描述对象的行为和属性
    类用于创建此类的一个或多个对象(实例)
  说明:
    继承列表可以省略,省略继承列表表示继承自object类
    类名必须是标识符
    类名实质是变量,它绑定一个类(不要轻易对其赋值)

  示例见:
    myclass.py 

构造函数
  构函函数用的表达式语法:
    类名([创建传参列表])
  作用:
    创建这个类的实例对象,并返回此实例对象的引用关系
  示例见:
    constructor.py


    类     |     对象(实例)
  class    |  object(instance)


实例说明:
  实例有自己的作用域实例方法名和名字空间,可以为该实例添加实例变量(也叫属性)
  实例可以调用类方法和实例方法
  实例可以访问类变量和实例变量

实例方法(instance method)
  定义语法:
    class 类名(继承列表):
        def 实例方法名(self, 形参1, 形参2, ...):
            '''方法的文档字符串'''
            语句块
  作用:
    用于描述一个对象的行为,让此类型的全部对象都拥有相同的行为
  说明:
    实例方法的实质是函数,是定义在类内的函数
    实例方法至少有一个形参,第一个形参绑定调用这个方法的实例,
      一般命名为'self'

  调用语法:
    实例.实例方法名(调用传参)
    或
    类名.实例方法名(实例, 调用传参)
  示例见:
    instance_method.py




实例属性 instance attribute(也叫实例变量)
  每个实例可以有自己的变量用来记住自己的数据,称为实例属性

  属性的使用语法
    实例.属性名

  属性的赋值规则:
    首次为属性赋值则创建此属性
    再次为属性赋值则修改属性的绑定关系

  作用:
    记录每个对象自身的数据

  示例见:
    attribute.py
  
  

删除属性:
  del 语句可以删除对象的属性

  语法:
    del 实例.实例属性名
  示例:
    class Dog:
       pass
    dog1 = Dog()
    dog1.color = '白色'
    print(dog1.color)  # 白色
    del dog1.color
    print(dog1.color)  # 出错,没有这个属性

练习:
  1. 定义一个 '人' 类
    class Human:
        def set_info(self, name, age, address='不详'):
            '此方法为self对象添加姓名,年龄,家庭住址属性'
            ... # 此处自己实现
        
        def show_info(self):
            '此方法显示某个人(实例)的信息'
            ... # 此处自己实现
    h1 = Human()
    h1.set_info('小张', 20, '北京市朝阳区')
    h2 = Human()
    h2.set_info('小李', 18)
    h1.show_info()  # 小张 今年 20 岁,家庭住址: 北京市朝阳区
    h1.show_info()  # 小李 今年 18 岁,家庭住址: 不详



初始化方法
  作用:
    对新创建的对象添加属性
  语法格式:
    class 类名(继承列表):
        def __init__(self[, 形参列表]):
            语句块
    注: [] 代表其中的内容可省略
  说明 :
    1. 初始化方法名必须为 __init__ 不可改变
    2. 初始化方法会在构造函数创建实例后自动调用,且将实例自身
       通过第一个参数self传入 __init__ 方法
    3. 构造函数的实参将通过 __init__ 方法的形参列表传入到
       __init__ 方法中
    4. 初始化方法内如果需要return 语句则必须返回None
  示例见:
    init_method.py


练习:
  写一个学生类 Student类, 此类用于描述学生信息,学生信息有
    姓名,年龄,成绩(默认为0)
  1. 为该类添加初始化方法,实现在创建对象时自己自动设置,
     姓名,年龄,成绩
  2. 添加 set_score方法能力对象修改成绩信息
  3. 添加show_info方法打印学生对象的信息
  如 :
    class Student:
        def __init__(...):
            ...
        def set_score(...):
            ...
        def show_info(...):
            ...
    L = []
    L.append(Student('小张', 20, 100))
    L.append(Student('小李', 18, 98))
    L.append(Student('小王', 19))
    L[2].set_score(80)
    for s in L:
        s.show_info()  # 显示每个对象的信息



析构方法:
  语法:
    class 类名: 
        del __del__(self):
            语句块 
  作用:
    经常用于释放对象所占用的资源(如对象打开的文件等)
  说明:
    1. 析构方法将在对象被销毁前自动调用
    2. python语言建议不要在对象销毁时做任何事情,因为销毁的
       时间难以确定
  示例见:
    del_method.py
    


预置的实例属性
__dict__ 属性
  __dict__ 属性绑定一个存储此实例自身变量的字典

  示例:
    class Dog:
        pass
    dog1 = Dog()
    print(dog1.__dict__)  # {}
    dog1.color = '白色'
    print(dog1.__dict__)  # {'color': '白色'}

__class__ 属性
  __class__ 属性绑定创建此实例的类

  作用:
    可以借助此属性来访问创建此实例的类
  示例:
    class Dog:
       pass
    dog1 = Dog()
    print(dog1.__class__)
    print(dog1.__class__ is Dog)  # True
    dog2 = dog1.__class__()  # 创建一个dog1的同类对象
    print(dog2.__class__)

用于类的函数:
  isinstance(obj, class_or_tuple) 返回这个对象obj是否是
       某个类class或某些类(tuple中的类)的实例对象,如果是返回
       True, 否则返回False

  type(obj)  返回obj这个对象的类

  示例:
    isinstance(100, int)  # True
    isinstance("hello", str)  # True
    class Dog:
        pass
    dog1 = Dog()
    isinstance(dog1, Dog)  # True
    isinstance(3.14, (Dog, int))  # False
    isinstance(3.14, (Dog, int, float))  # True



练习:
  有两个人:
    1. 姓名: 张三, 年龄: 35
    2. 姓名: 李四, 年龄: 15
  行为:
    1. 教别人学东西 teach
    2. 工作赚钱 work
    3. 借钱 borrow(从xxx处错钱)
    4. 显示自己的信息 show_info
  事情:
    张三 教 四李 学 python
    李四 教 张三 学 王者荣耀
    张三 上班赚钱 1000 元
    李四 向 张三 错钱 200 元
    35 岁的 张三 有钱 800 元,它学会的技能是: 王者荣耀
    15 岁的 李四 有钱 200 元,它学会的技能是: python
  如:
    class Human:
        def __init__(self, ....):
            ...
        def teach(self. ...)




练习:
   1. 修改原学生信息管理程序, 原学生数据用字典保存,
      现改为Student类型的对象来保存
    要求 :
      定义一个Student 类,此类写在:
         student.py 模块中
        



