day06回顾
  列表
    索引和切片
      取值
        v = 列表[整数表达式]
        lst2 = 列表[开始:结束:步长]  #  返回列表
      赋值
        列表[整数表达式] = v
        列表[开始:结束:步长] = 可迭代对象
    
  del 语句
    del 列表[整数表达式]
    del 列表[开始:结束:步长]
  
函数:
  len(x)  max(x)  min(x)  sum(x)   any(x)  all(x)\

  reversed(x)  将可迭代对象反转,返回另一个可迭代对象
  sorted(x, reverse=False)  排序(默认为升序排序)
列表的方法:
  L.append(x)  # 追加
  L.extend(可迭代对象)  # 作用类似于L += (可迭代对象)
  L.count(x)
  L.copy()        浅拷贝
  L.remove(x)     删除
  L.pop([索引])    移除(取出)返回取出来的数据
  L.clear()       清空
  L.inserst(索引,obj)  插入
  L.sort(reverse=False)  # 对L列表进行排序
  L.reverse()            # 对L列表进行反转

深拷贝和浅拷贝
  不拷贝:
    L2 = L1   两个变量同时绑定同一个对象
  浅拷贝:
    L2 = L1.copy()  或 L2 = L1[::]  只复制一层,深层对象
                                    共同拥有 
  深拷贝:
    import copy
    L2 = copy.deepcopy(L1)  # 复制整数树型关联的对象
  
文件解析方法:
  s.split(sep=None)
  s.splitlines()
  s.join(字符串可迭代对象)

列表推导式:
  创建列表的表达式
    [表达式 for 变量 in 可迭代对象 if 真值表达式 ....]
  


day07 笔记:
元组 tuple
  1. 元组是不可以改变的序列,同list一样,元组是可以存放任意类型
     数据的容器
  2. 可以认为,元组是不可变的列表

元组的表示方法:
  用小括号() 括起来,单个元素括起来后加逗号(,) 号区分元组还是
    单个元素
创建空元组:
    ()   # 创建一个空元组
创建非空元组:
    t = 100,
    t = (200,)
    t = (1, 2, 3)
    t = 100, 200, 300
注:  type(x)函数可以返回x的类型

元组的错误示例:
  t = (20)  t 绑定20这个整数,不是元组
  x, y, z = 100, 200, 300  # 序列赋值,不是元组
  x, y, z = (100,200, 300)  
  x, y, z = [100,200, 300]
  x, y, z = "ABC"
  x, y  = y, x  # 序列赋值实现交换


元组的构造函数:
  tuple()  生成一个空的元组,等同于()
  tuple(iterable)  用可迭代对象生成一个元组

  示例:
    t = tuple()
    t = tuple("ABC")
    t = tuple(range(1, 10, 3))
    t = tuple([2, 3, 5, 7])

元组是可迭代对象
    t = tuple("ABC")
    for x in t:
        print(x)
    L = [x for x in t]

元组的运算
  算术运算:
    +    +=    *     *= 
    用法等同于字符串的算术运算
    如:
      t = (1,2,3) + (4, 5, 6)
      t += (7, 8, 9)  # 注:此处t绑定的对象的ID会变化
      t = (1,2,3) * 2
      t *= 3
  元组的 in / not in 运算符
    判断一个值是否存在于元组中,如果存在返回True, 否则返回False
    (与列表的in / not in 功能相同)  
  索引 index
    用法等同于列表的索引
    注: 元组不支持索引赋值
  切片:
    用法与列表的切片用法相同
    元组的切片返回一个新的元组
    元组不能切片赋值

元组的方法:
  T.index(v[,begin[,end]])  返回对应元素的索引下标,begin
            为开始索引,end为结束索引,当v 不存在时会触发
            ValueError类型的错误!
  T.count(x)   返回元组中对应的元素个数

练习:
  生成一个0~9的整数的平方的元组,元组如下:
    (1, 4, 9, 16, .... 81)

三种序列 小结
  str
  tuple
  list
  都是容器:
    不可变:  str, tuple
    可变:   list
  有先后顺序关系

能用于序列的函数总结:
  len(x)  max(x)  min(x)  sum(x)  any(x)  all(x)
  构造函数:
    str(x)  tuple(x)   list(x)

    reversed(x), sorted(x, reverse=False)


  

字典 dict
  什么是字典
    1. 字典是一种可变的容器,可以存储任意类型的数据
    2. 字典中的每个数据都是用"键"(key) 进行索引,而不像序列
       (字符串,列表等) 可以用整数下标进行索引
    3. 字典内的数据没有先后顺序关系,字典的存储是无序的
    4. 字典中的数据以键(key)-值(value) 对的形式进行映射存储
    5. 字典的键不能重复,且只能用不可变类型作为字典的键

  字典的字面值表示方式:
    字典是以{} 括起来,以冒号(:) 分隔键-值对,各键-值对之间用
    逗号分隔
  创建空字典:
    d = {}
  创建非空字典:
    d = {'姓名': 'tarena', '年龄': 15}
    d = {1:'一', 2:'二', 3:'三'}
    d = {1:'One', 2:'Two', 3:'Three'}
    d = {'a': {'b': 100, 'c': 200}}
    d = {'name': None}
    d = {tuple(range(4)): list(range(4))}
    d = {1:'壹', 2:'二', 5:'伍', 1:'一'}  # 重复只留一个
  字典的构造函数 dict
    dict()  # 创建一个空的字典 等同于 {}
    dict(iterable)  用可迭代对象初始化一个字典
    dict(**kwargs)  关键字传参形式生成一个字典
  示例:
    d = dict()   # d = {}
    L = [(1, 2), [3, 4], "AB"]
    d = dict(L)    # d = {1: 2, 3: 4, 'A': 'B'}
    d = dict(name='tarena', age=15)
    注:
      字键字传参时,关键字的名字必须是符合标识符命名规则的
      字符串


字典的键(key)必须是不可变类型:
  bool, int, float, complex, str, tuple,
  frozenset(固定集合)和bytes(字节串)(后面才学)
  和None对象

可变的数据类型:
  list, dict, set(集合), bytearray(字节数组) (后面才学)

字典的键索引 
  用[] 运算符可以获取字典内"键" 对应的值
  语法:
    v = 字典[键]
  示例:
    d = {'name': 'tarena', 'age': 20}
    print(d['name'], '今年', d['age'], '岁')

添加和修改字典的元素
  语法:
    字典[键] = 值
  说明:
    如果键不存在,创建键,并绑定键对应的值
    键存在,修改键绑定的值
  示例:
    d = {}
    d['name'] = 'tarena'  # 创建'name'键,对应'tarena'
    d['age'] = 15  # 创建'age'键,绑定 15
    d['age'] = 16  # 修改'age'键,绑定为 16
    print(d)  # 


del 语句
  删除字典的键,同时解除与值的绑定关系
  语法:
    del 字典[键]
  示例:
    d= {'name': 'tarena', 'age':15}
    del d['name']  # 删除'name'键

字典的成员资格判断 in / not in 运算符
  可以用 in 运算符来判断一个键是否存在于字典中,如果存在则返回
    True,否则返回False
  not in 与 in 结果相反
  示例:
    d = {1:'一', 'aaa': '三个a'}
    1 in d           # True
    '一' in d        # False
    2 not in d       # True
    '三个a' not in d  # True

练习:
  写程序
    1) 将如下信息形成一个字典 seasons
      '键'        '值'
       1      '春季有1,2,3月'
       2      '夏季有4,5,6月'
       3      '秋季有7,8,9月'
       4      '冬季有10,11,12月'
   2) 让用户输入一个整数代表这个季度,打印这个季度的信息,
   如果用户输入的信息不在字典内,则打印"信息不存在"

字典的迭代访问
  字典是可迭代对象,字典只能对键进行迭代访问
  示例:
    d = {'一': 1, '二': 2, '三', 3}
    for x in d:
        print(x)

字典的比较:
  ==  != 
  == 字典是否完全相同(键相同,值也相同则返回True)
  != 与 == 返回值相反

示例:
   {'一': 1, '二': 2} ==  {'二': 2, '一': 1}  # True
   {'一': 1, '二': 2} ==  {'二': 2, '一': 1.1}  # False

可以用于字典的内建函数:
  len(x)   返回字典的键值对的个数
  max(x)   返回字典的键的最大值
  min(x)   返回字典的键的最小值
  sum(x)   返回字典中所有键的和
  any(x)   真值测试, 如果字典中其中一个键为真,则结果为True
  all(x)   真值测试, 如果字典中所有键为真,则返回True

示例:
  d = {0: '零', 5: '伍', 8: '捌', 3: '叁'}
  len(d)  # 4
  max(d)  # 8
  min(d)  # 0
  sum(d)  # 16
  any(d)  # True
  all(d)  # False

字典的方法:
  文档参见:
    python_base_docs_html/dict.html

  示例:
    d1 = {1: 'One', 2: '二', 3: '三'}
    for t in d1.items():
        print(t)  # (1, 'One')  (2, '二')  (3, '三')
  
    for 语句的语法:
       for 变量列表 in 可迭代对象:
           语句
    for k, v in d1.items():
        print("键:", k, '值:', v)

练习:
  输入一段字符串, 打印出这个字符串出现过的字符及出现过的次数
  如:
    请输入:abcdabcaba
  打印:
    a: 4次
    b: 3次
    d: 1次
    c: 2次
    (注: 不要求打印次序)

练习:
  写一个程序.
    1) 输入一些单词和解释,将单词作为键,解释作为值存于
       字典中,当输入单词为空时结束输入

    2) 然后进入查词过程(死循环)
       输入单词,如果单词在字典中,则显示解释内容
       如果单词不存在,则提示"没有此单词"
    
  
字典推导式
  字典推导式是用可迭代对象依次生成字典内元素的表达式

语法:
  {键表达式: 值表达式 for 变量 in 可迭代对象 [if 真值表达式]}
    注: []代表内部的内容可以省略
示例:
  生成一个字典,键为数字(1~9),值为键的平方
  d = {x: x ** 2 for x in range(1, 10)}

练习:
  有如下字符串列表:
    L = ['tarena', 'xiaozhang', 'hello']
  请生成如下字典:
    d = {'tarena': 6, 'xiaozhang':9, 'hello':5}
    注: 值为键的长度
  答案:
    d = {x: len(x) for x in L}

练习2:
  已知有两个等长的列表:
    list1 = [1001, 1003, 1008, 1004]
    list2 = ['Tom', 'Jerry', 'Spike', 'Tyke']
  用list2中的元素作为键,用list1中对应的元素作为值,生成如下
  字典
    d = {'Tom': 1001, 'Jerry':1003, 'Spike': 1008,
         'Tyke': 1004}


字典推导式的嵌套
  语法规则同列表的推导式

字典 vs 列表
  1. 都是可变对象
  2. 索引方式不同(列表用整数索引,字典用键索引)
  3. 字典的插入,删除,修改的速度可能会快于列表(重要)
  4. 列表的存储是有序的,字典的存储是无序的



练习:
  1.  有一只小猴子,摘了很多桃.
     第一天吃了全部桃子的一半,感觉不饱又吃了一个
     第二天吃了剩下的一半,感觉不饱又吃了一个
     ... 以此类推
     到第十天,发现只剩一个了
    请问一天摘了多少桃子?
  2. 写一个程序,实现一个带有菜单界面的字典程序
     菜单如下:
        1) 添加单词
        2) 删除单词
        3) 查找单词
        q) 退出
    示意见:

  3. 项目(学生信息管理)
    输入任意个学生的信息,形成字典后存入列表中
       学生信息有: 姓名,年龄,成绩
    如:
      请输入姓名: tarena
      请输入年龄: 15
      请输入成绩: 99
      请输入姓名: name2
      请输入年龄: 20
      请输入成绩: 80
      请输入姓名: <回车> 结束输入
    形成内部存储格式如下:
    infos = [{'name': 'tarena', 'age':15, 'score':99},
             {'name': 'name2', 'age':20, 'score':80}]
    
    第二步以表格方式打印上述列表的内容:
    +---------------+----------+----------+
    |    姓名        |    年龄  |    成绩   |
    +---------------+----------+----------+
    |    tarena     |    15    |    99    |
    |     name2     |    20    |    80    |
    +---------------+----------+----------+





















