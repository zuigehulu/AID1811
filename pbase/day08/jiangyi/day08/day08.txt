day07回顾
  两个容器:
    元组 tuple  ,  字典 dict
元组的创建:
   ()   20,    (20,)   (1,2,3)    1,2,3
   构造函数: tuple()   tuple(可迭代对象)

   运算:
      + += * *=
    元组的比较运算:
      > >= < <= == !=
      同列表的比较规则完全相同
    in / not in 运算
    索引, 切片
      t[1]      t[1:10:2]
    元组的方法:
      T.index(value[, begin[, end]])
      T.count(x)   返回回元素个数
    
字典 dict
  可变的, 无序的, 容器
  键(key) - 值(value)  对
  (不可变)  (任意类型)

  字典的创建方式:
    字面值
      {}, {1:'一'}, {1:1.1, 2:2.2}
    构造函数
      dict(), dict(可迭代对象), dict(关键字传参)
    推导式
      {键表达式: 值表达式 for 变量1 in 可迭代对象1 if 真值表达式1 ....}
  
  添加和修改字典的键-值对
    d[键] = 值表达式
  删除字典的键
    del d[键]
  查看字典的键对应的值
    value = d[键]

  字典是可迭代对象(可以迭代取出字典的键)

  可迭代对象能用在什么地方:
    for 变量 in 可迭代对象:
        ...
    推导式中
    [表达式 for 变量 in 可迭代对象]
  in / not in 运算
  比较运算:
    == != 
  函数:
    len(x)  max(x) min(x) sum(x) any(x) all(x)
  字典的方法:
    D.clear()
    D.pop(key)
    D.update(d2)
    D.copy()  浅拷贝
    D.get(key, default=None)  # D[key]
    D.keys()    # 返回可迭代对象
    D.values()  # 返回值的可迭代对象
    D.items()   # 返回(键,值)元组的可迭代对象
    for k, v in D.items():
        ...





day08笔记:
集合 set
  集合是可变的容器
  集合内的数据对象都是唯一的(不能重复多次的)
  集合是无序的存储结构,集合中的数据没有先后顺序关系
  集合内的元素必须是不可变对象
  集合是可迭代对象
  集合是相当于只有键没有值的字典(键则是集合的数据)

创建空集合:
   set()

创建非空集合的字面值:
   s = {1, 2, 3}

集合的构造(创建)函数 set
   set() 创建一个空集合(注: 不能用{}来创建空集合}
   set(iterable)  用可迭代对象创建一个新的集合对象

示例:
  s = set()  # s绑定一个空集合
  s = {2, 3, 5, 7}
  s = set("ABC")     # s = {'A', 'B', 'C'}
  s = set("ABCCBA")  # s = {'A', 'B', 'C'}
  s = set({1:'一', 2:'二'})  # s = {1, 2}
  s = set([1, 0, 3.14, None])  # {0, 1, 3.14, None}
  s = set([True, False, 1, 0, None])  # s = {False, True, None}
  s = set(("ABC", "123", 123))
  s = {True, None, [1, 2, 3]}  # 出错
  s = {1, 2, {1:'One'}}   # 出错

集合的运算:
  交集&  并集|  补集-  对称补集^  子集<  超集 >

& 生成两个集合的交集
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s1 & s2  # 得 {2, 3}

| 生成两个集合的并集
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s1 | s2 # {1, 2, 3, 4}

- 生成两个集合的补集
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s1 - s2   # {1}
  s2 - s1   # {4}

^ 生成两个集合的对称补集
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s1 ^ s2  # 得 {1, 4}

> 判断一个集合是另一个集合的超集
< 判断一个集合是另一个集合的子集
  s1 = {1, 2, 3}
  s2 = {2, 3}
  s1 > s2  # True  s1是s2的超集
  s2 < s1  # True  s2 是s1的子集
  s2 > s1  # False

== != 集合相同或不同
  s1 = {1, 2, 3}
  s2 = {3, 2, 1}
  s1 == s2  # True
  s1 != s2  # False

其它:
  <= >=
  &=  x &= y相当于  x = x & y
  |=  x |= y相当于  x = x | y
  ^=  x ^= y相当于  x = x ^ y

in / not in 运算符
   同列表的in / not in 作用相同

集合相关的函数:
  len(x)  max(x) min(x) sum(x) any(x) all(x)

练习:
  经理有: 曹操, 刘备, 孙权
  技术员有: 曹操, 孙权, 张飞, 关羽
  用集合求:
    1. 即是经理也是技术员的有谁?
    2. 是技术人员,但不是经理的人有谁?
    3. 是经理,但不是技术人员的有谁?
    4. 张飞是经理吗?
    5. 身兼一职的人有谁?
    6. 经理和技术人员共有几个人?


集合的方法:
  文档参见:
    python_base_docs_html/set.html

集合推导式:
  集合推导式是用可迭代对象创建集合的表达式

  语法:
    {表达式 for 变量 in 可迭代对象 [if 真值表达式]}
    注:[] 括号内的部分可以省略

  示例:
    L = [1, 2, 3, 6, 5, 4, 3, 2, 1]
    s = {x ** 2 for x in L}
    print(s)
  
  集合推导式的嵌套
    嵌套规则与列表推导式完全相同
  


固定集合 frozenset
  固定集合是不可变的,无序的,含有唯一元素的集合
  固定集合就是不可变的集合

  作用:
    固定集合可以作为字典的键,还可以做为集合的值

固定集合的构造(创建)函数 frozenset
  frozenset()          创建一个空的固定集合
  frozenset(iterable)  用可迭代对象创建一个固定集合

  示例:
    fz = frozenset()
    fz = frozenset(range(10))
  
固定集合的运算:
  &交集  |并集   -补集  ^ 对称补集
  &=    |=      -=      ^=
  in / not in 
  > >= < <= == !=
  (以上运算等同于set中的用法)

固集合的方法:
  相当于集合的全部方法去掉修改集合的方法


小结:
数据类型:
  不可变的数据类型:
    int, float, complex, bool, str, tuple, frozenset
    bytes(字节串,后面再学)
  可变的数据类型:
    list, dict, set, bytearray(字节数组,后面才学)

值:
  None, False, True, ....

运算符:
  + - * / // % **  
  += -= .....
  > >= < <= == != 
  is / is not
  in / not in
  not   and    or
  & | ^ 
  &= |= ^= 
  +(正号) -(负号)
  [] / [:]  索引 和 切片

表达式:
  1
  1 + 2
  len(L1) + len(L2)
  条件表达式:   x if x > y else y
  全部的推导式  [ x for x in range(10)]
     列表,字典,集合推导式(三种)

语句:
  表达式语句:
    print("hello")
    '''abcd'''
  赋值语句:
    a = 100
    a = b = c = 200
    x, y, z = 100, 200, 300
  del 语句 
  if 语句
  while 语句
  for 语句
  break 语句
  continue 语句
  pass 语句

内建函数
  用于容器的函数:
    len(x)
    max(x)
    min(x)
    sum(x)
    any(x)
    all(x)
  构造函数:
    int(x)
    float(x)
    complex(x)
    bool(x)
    str(x)
    list(x)
    tuple(x)
    dict(x)
    set(x)
    frozenset(x)
  数值型函数:
    abs(x)
    round(x, y)
    pow(x, y, z=None)
  字符串相关的函数:
    bin(x)
    oct(x)
    hex(x)
    chr(x)
    ord(x)
  可迭代对象相关的函数:
    range(start, stop, step)
    reversed(x)
  输入输出相关的函数:
    input(x)
    print(...)
  其它:
    type(x)
    id(x)
    help(x)



    
函数 function
  什么是函数:
    函数是可以重复执行语句块,可以重复调用
    函数是面向过程编程的最小单位
  作用:
    1. 用于封装语句块,提高代码的重用性
    2. 定义用户级别的函数 

def 语句
  作用:
    创建一个函数,用变量绑定这个函数
  语法:
    def 函数名(形参列表):
        语句块(代码块)
  说明:
    1. 函数的名字就是语句块的名称
    2. 函数名的命名规则与变量名相同(必须为标识符)
    3. 函数名是一个变量(不要轻易对其赋值)
    4. 形参列表是用户自定义的变量名,用来接收调用者传入的参数 
    5. 函数有自己的名字空间,在函数外部不可以访问函数内部的变
      量,在函数内部可以访问函数外部的变量,但不能用赋值语句
      修改这些(外部,全局)变量的绑定关系
    6. 函数如果不传入参数,参数列表可以为空
    7. 语句部分不能为空,如果为空需要填充pass语句
  示例见:
    def.py
    def2.py
    def3.py

函数调用
  语法:
    函数名([实际调用传递参数])
    注: [] 代表内部的内容可省略

  说明:
    函数调用是一个表达式
    如果函数内部没有return语句,则函数执行完毕后返回None
  示例见:
    def.py


练习:
  1. 写一个函数 myadd, 此函数中的参数列表里有两个参数x, y 
     此函数的功能是打印调用参数的和,即 x + y 
    
    如:
      def myadd(...):
         ...  # ...的部分自己实现
      # 调用:
      myadd(100, 200)      # 300
      myadd("ABC", "123")  # ABC123

  2. 写一个函数 print_even, 传入一个参数n代表终止的整数
    (注: 不包含n), 此函数打印:
       0 2 4 6 8 ... 到n为止的全部偶数
    如:
      print_even(n):
         ....  # 此处自己实现
      # 调用
      print_even(10)  # 打印 0 2 4 6 8

return 语句
  语法:
    return [表达式]
    注:[]代表内部内容可以省略
  作用:
    用于函数中,结束当前函数的执行,返回到调用该函数的地方,同时
    返回一个对象的引用关系
  说明:
    return 语句后跟的表达式可以省略,省略后相当于return None
    如果函数内部没有return 语句,则函数执行完最后一条语句后
    返回None(相当于在最后加了一条return None语句)
  示例见:
    return.py
  

练习:
  1. 写一个函数 mymax, 实现返回两个数的最大值:
    如:
      def mymax(a, b):
          ....  # 此处自己实现

      print(mymax(100, 200))  # 200
      print(mymax("ABC", "ABCD"))  # ABCD

  2. 写一个函数myadd,实现给出两个数,返回这两个数的和
    如:
      def myadd(x, y):
          ...
      a = int(input("请输入第一个数: "))
      b = int(input("请输入第二个数: "))
      print(a, '+', b, '的和是', myadd(a, b))
  3. 写一个函数 input_number
    def input_number():
        ...  # 此处自己实现
    此函数用来获取用户循环输入的整数.当输入负数时结束输入
    将用户输入的数字形成列表的形式返回,再用内建函数max, min,
    sum,求用户输入的最大值,最小值及和
    L = input_number()
    print("用户输入的最大值是:", max(L))
    print("用户输入的最小值是:", min(L))
    print("用户输入的全部数的和是:", sum(L))




练习:
  1. 写一个函数 get_chinese_char_count ,此函数实现的功能是
    给定一个字符串,返回这个字符串中中文字符的个数
      def get_chinese_char_count(s):
          ...  # 此处自己实现

      s = input('请输入中英文字混合的字符串:')
      print("您输入的中文字符的个数是:",
            get_chinese_char_count(s))
    注: 中文字符的编码范围是: 0x4E00 ~ 0x9FA5(包含)
  2. 定义两个函数:
     sum3(a, b, c)   用于返回三个数的和
     pow3(x)         用于返回x的三次方
    用以下函数计算:
       1)  计算1的立方 + 2的立方 + 3的立方的和
       2)  计算1+2+3的和的立方
       即:1**3+2**3+3**3 和 (1+2+3) ** 3
  3. 编写函数fun ,其功能是计算并返回下列多项式的值
    Sn = 1 + 1/2 + 1/3 + 1/4 + .... + 1/n
      def fun(n):
          ...
      print(fun(2))   # 1.5
      print(fun(3))   # 1.8333333333333
      print(fun(10))  # ????
    









