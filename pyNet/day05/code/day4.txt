前情回顾

1. http协议
   响应 ： 响应行  响应头  空行  响应体

   http_server 
      * 接收浏览器请求
      * 查看请求内容
      * 将一个网页返回给浏览器

2. IO分类
    阻塞IO : 默认的IO形态 ，效率低
    非阻塞IO：设置非阻塞行为，超时检测
       setblocking(False)
       settimeout()

    IO多路复用：通过同时监控多个IO，选择可执行的处理
                ，以此提高执行效率
       
       select（rlist,wlist,xlist[,timeout]）
       poll
       epoll
***************************************************

poll方法

p = select.poll()
功能： 生成poll对象
返回值： poll对象

p.register(fd,event)
功能： 注册要监控的IO事件
参数： fd 要监控的IO对象
       event 选择要关注的事件类别
          常用：POLLIN   读IO事件 rlist
	        POLLOUT  写IO事件 wlist
		POLLERR  出错IO  xlist
		POLLHUP  断开连接事件

          e.g.  p.register(s,POLLIN|POLLERR)

p.unregister(fd)
功能： 取消对IO的监控
参数： IO对象或者文件描述符

events = p.poll()
功能： 监控所有注册的IO
返回值： events 是一个列表，返回所有就绪的IO
         [(fileno,event),(fileno,event),....]
         每个就绪IO都会在系列表中形成一个元组
	 第一项为IO的fileno，第二项为就绪事件

* 需要配合查找字典通过fileno获取事件对象处理IO
  e.g.  {s.fileno():s} 确保字典包含所有注册IO 

poll_server步骤：

1.创建套接字
2.注册套接字为关注IO
3.创建查找字典，并维护
4.循环监控IO发生
5.处理发生的IO事件

epoll方法

使用方法： 基本与poll方法相同
* 将生成对象的poll改为epoll
* 将所有事件改为epoll类型事件

epoll特点：
  * epoll的效率比select和poll要高
  * epoll可以监控的io比select poll要多
  * epoll的触发方式要多 EPOLLET(边缘触发) 。默认三种方   法都是水平触发（实际select poll只有水平触发）

    水平触发：当IO事件发生时会一直提醒用户处理，直到           处理完毕
    边缘触发：当IO事件完发生时提醒用户处理，如果没有           处理则不会持续提醒，而是下一次再有IO事            件就绪时再一同请求用户处理

struct模块

功能 ： 将一组数据进行结构化打包发送
原理 ： 将数据转换为bytes格式发送，接收到的bytes格式         数据也可以按照一定的数据类型解析

Struct(fmt)
功能： 生成struct对象
参数： fmt  定值的数据结构组成
        e.g.  要发的数据： 1  zhang   1.75
	      fmt数据结构： Struct（'i5sf'）

	      python类型  fmt
	         int       i
		 float     f
		 bytes    ns (n表示n个字符)

st.pack(v1,v2,v3.....)
功能： 将一组数据按照指定格式打包
参数： 要打包的数据
返回值： 返回打包后的bytes字串

e.g.   st.pack(1,b'zhang',1.75)

st.unpack(bytes_data)
功能：将一个bytes字串解包
参数： 要解析的bytes
返回值： 解析后的内容

* 可以使用struct模块直接调用pack  unpack函数
  struct.pack(fmt,v1,v2,v3...)
  struct.unpach(fmt,bytes_data)
  
  e.g.  struct.pack('i5sf',1,b'zhang',1.75)
        struct.unpack('i5sf',data)


本地套接字

功能： 本机两个程序之间进行数据传输

创建流程
    1. 创建本地套接字
       sockfd = socket(AF_UNIX,SOCK_STREAM)
    2. 绑定本地套接字文件
       sockfd.bind(file)
    3. 监听
       listen()
    4. 消息收发
       recv  send

cookie
Linux 系统中文件： b块设备  c字符设备
                   d 目录  - 普通文件
                   l链接   s 套接字文件
		   p 管道文件

os.remove(file)
功能：删除一个文件

os.path.exists(file)
功能：判断一个文件是否存在


多任务编程

意义 ： 充分利用计算机资源提高程序的运行效率

定义 ： 通过一定的编程方法，在以程序运行中可以同时开         启多个任务，通过计算机多核同时执行，以此提高         运行效率。

实现方案 ： 多进程   多线程

并发 ： 同时处理多个任务，内核在任务间不断的切换，达         到好像多个任务被同等执行的效果。实际每个时刻         只有一个任务占有内核

并行 ： 多个任务利用计算机多核资源在同时执行，此时多         个任务间为并行关系


进程（Process）

  定义： 程序在计算机中的一次执行过程

  程序： 是一个可执行文件，是静态的占有磁盘空间

  进程：是一个动态过程，占有计算机资源，有一定生命周       期

进程的产生

1. 用户空间通过调用接口或者启动程序发起进程创建请求
2. 操作系统接受用户请求开始创建进程
3. 操作系统分配计算机资源，确定进程状态，开辟空间等
4. 操作系统将创建的进程提供给用户使用

进程相关概念

   cpu时间片：如果一个进程占有cpu内核，则这个进程在            时间片上

   PCB(进程控制块)：在内存中开辟的一块空间存放进程                    的基本信息

   进程ID（PID）：系统为进程分配的ID号，每个进程ID不                 重复，是大于0 的整数

	查看命令： ps  -aux

   父子进程： 系统中每一个进程都有唯一的父进程，可以            有0个或多个子进行，形成一个完整的树形             关系

        查看命令 ： pstree


进程状态
    
    三态
        就绪态：进程具备执行条件，等待系统分配资源
        运行态：进程占有cpu时间片，正在运行
	等待态：进程暂时阻塞不具备执行条件
    
    五态（增加新建和终止两种状态）
        新建态：创建一个新的进程，获取资源的过程
	终止态：进程结束，释放资源的过程
    
    ps -aux 中 STAT列 

     S  等待态
     R  运行态（就绪态）
     Z  僵尸

     <  有较高的优先级
     N  有较低优先级
     +  前台进程
     s  进程组组长
     l  有多线程的

进程特征

    1. 进程可以使用计算机的多核资源
    2. 进程是计算机分配资源的最小单位
    3. 进程之间运行互不影响，各自独立
    4. 每个进程空间独立，各自占有资源，互不干扰

要求：
    1.什么是进程，和程序有什么区别
    2.进程的特征有哪些
    3.进程状态有哪些，相互之间如何转换

多进程编程

import  os

pid = os.fork()
功能： 创建新的进程
返回值：失败   返回一个负数
        成功   在原进程中返回新进程的PID号
	       在新进程中返回0

作业： 把要求的问题自己描述总结
       网络编程程序过一般







